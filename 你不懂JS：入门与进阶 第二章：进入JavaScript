       你不懂JS：入门与进阶 第二章：进入JavaScript
    2.1.1  关于javascript中的几种类型：
       null， undefined， string， number， boolean, object, symbol;
       
       当   var a = null;
            typeof a;object
            
            var a = undefined;
            typeof a;//undefined
            
            typeof a表示a容器中的值得类型为什么类型，而不是a容器是什么类型。
            
            
     2.1.2  对象
           var j = {
                a : 123;
                b ： “asd”；
                c ： null；
            }
            obj.c； //object
            obj.a； //123
            obj.b； //asd
            当这3个值一起输出的时候只有最后一个值输出。这是为什么？
            obj["a"];
            obj["b"];
            obj["c"];
            
            当属性名字和外部的名字一样的话。用obj.["属性名称"]比较好，
            var a = {
                b : 123,
                c : "asd",
            }
            var c = "b";
            obj.["c"];//asd
            obj.[c];//123
       2.1.3 数组
          var arr = [ 123, "str", "null", true];
          arr [ 0 ];//123
          arr [ 1 ];//"str"
          arr [ 2 ];//"true"
          arr [ 3 ];//true
          typeof arr;//"object"
          2.1.4函数
          function foo （）{
            var b = 10；
            return b；
          }
          typeof foo;//表示一个函数
          typeof foo（）;//表示数值
          foo（）；//数值
          为什么    输入console.log （foo（））；//会输出一个数值  为什么还有一个undefined？？
     2.1.5  内建类型的方法
          var  b = “hello，world！”；
          var  a = 123；
          a.length；//表示数组的长度
          a.toUpperCase ()；//表示把字符串都变为大写
          这些什么基本类型值当做什么类型的对象来使用时，js 自动的将这个值“封箱为对应的对象包装器。而这个包装器里面正好有你想调用的方法；
          例如   number基本类型值  当做number对象使用时   js会自动把这个值封箱为对象包装器，string基本类型值也是这样的。
    2.1.5   值的比较
    2.1.7   强制转换
          第一种显示强制转换：
             var a = “32”；
             var c = Number （a）；
             console.log （c）；//值为数值
             第二种为隐式强制转换
             var a = “32”
             var b = 1 + “32”；
             console.log （b）；//输出33
    2.1.8 Truthly   falsy
           性质：当非bealoon型强制转换为bealoon型  它是true   还是false；
           falsy的明确列表如下：
           “”//空字符串
           0， -0， NaN(非法的number)
           null， undefined
           false
           任何不在这个falsy的列表中的值都是truthly
           “hello”
           42
           true
           [], [1, 2, 3, "4"]数组
           function foo （）{}函数
    2.1.9 等价性
         注意 ==与===的区别
             43 == “43”//true  那么是转换为数值还是字符串？最终为   数值
             43 === "43"//false不能隐式的强制转换，===也被称呼为严格等价
             ！=与！==的区别也是一样的。
             如果你确定值就用 ==，不确定的值使用===
             var a = [1, 2, 3];
             var b = [1, 2, 3]; 
             var c = "1, 2, 3"; 这个题目是怎么回事。
             a == b;//false
             a == c;//false
             b == c;//false
             
             当代码为
             var a = [1,2,3];
             var b = [1,2,3]; 
             var c = "1,2,3";    与上面不同的是因为数组中出现了空格  但还是有问题 a == b  为什么是false
             a == b;//false
             a == c;//true
             b == c;//true
     2.2.0  不等价性
             其中的一个值不能转换为合法的数字，也就是非法的数值，在语言规定中NaN即不大于其他值，也不小于其他值
             var a = 32；
             var b = “fo”
             b不能转换为合法的数值，所以不能比较
             若是俩个都是字母可以比较
             var a = “asd”；
             var b = “zxc”；
             a < b;//true
     2.2.1 变量
     

             
           
           
         
          
          
          
