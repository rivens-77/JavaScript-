       你不懂JS：入门与进阶 第二章：进入JavaScript
    2.1.1  关于javascript中的几种类型：
       null， undefined， string， number， boolean, object, symbol;
       
       当   var a = null;
            typeof a;object
            
            var a = undefined;
            typeof a;//undefined
            
            typeof a表示a容器中的值得类型为什么类型，而不是a容器是什么类型。
            
            
     2.1.2  对象
           var j = {
                a : 123;
                b ： “asd”；
                c ： null；
            }
            obj.c； //object
            obj.a； //123
            obj.b； //asd
            当这3个值一起输出的时候只有最后一个值输出。这是为什么？
            obj["a"];
            obj["b"];
            obj["c"];
            
            当属性名字和外部的名字一样的话。用obj.["属性名称"]比较好，
            var a = {
                b : 123,
                c : "asd",
            }
            var c = "b";
            obj.["c"];//asd
            obj.[c];//123
       2.1.3 数组
          var arr = [ 123, "str", "null", true];
          arr [ 0 ];//123
          arr [ 1 ];//"str"
          arr [ 2 ];//"true"
          arr [ 3 ];//true
          typeof arr;//"object"
          2.1.4函数
          function foo （）{
            var b = 10；
            return b；
          }
          typeof foo;//表示一个函数
          typeof foo（）;//表示数值
          foo（）；//数值
          为什么    输入console.log （foo（））；//会输出一个数值  为什么还有一个undefined？？
     2.1.5  内建类型的方法
          var  b = “hello，world！”；
          var  a = 123；
          a.length；//表示数组的长度
          a.toUpperCase ()；//表示把字符串都变为大写
          这些什么基本类型值当做什么类型的对象来使用时，js 自动的将这个值“封箱为对应的对象包装器。而这个包装器里面正好有你想调用的方法；
          例如   number基本类型值  当做number对象使用时   js会自动把这个值封箱为对象包装器，string基本类型值也是这样的。
    2.1.5   值的比较
    2.1.7   强制转换
          第一种显示强制转换：
             var a = “32”；
             var c = Number （a）；
             console.log （c）；//值为数值
             第二种为隐式强制转换
             var a = “32”
             var b = 1 + “32”；
             console.log （b）；//输出33
    2.1.8 Truthly   falsy
           性质：当非bealoon型强制转换为bealoon型  它是true   还是false；
           falsy的明确列表如下：
           “”//空字符串
           0， -0， NaN(非法的number)
           null， undefined
           false
           任何不在这个falsy的列表中的值都是truthly
           “hello”
           42
           true
           [], [1, 2, 3, "4"]数组
           function foo （）{}函数
    2.1.9 等价性
         注意 ==与===的区别
             43 == “43”//true  那么是转换为数值还是字符串？最终为   数值
             43 === "43"//false不能隐式的强制转换，===也被称呼为严格等价
             ！=与！==的区别也是一样的。
             如果你确定值就用 ==，不确定的值使用===
             var a = [1, 2, 3];
             var b = [1, 2, 3]; 
             var c = "1, 2, 3"; 这个题目是怎么回事。
             a == b;//false
             a == c;//false
             b == c;//false
             
             当代码为
             var a = [1,2,3];
             var b = [1,2,3]; 
             var c = "1,2,3";    与上面不同的是因为数组中出现了空格  但还是有问题 a == b  为什么是false
             a == b;//false
             a == c;//true
             b == c;//true
     2.2.0  不等价性
             其中的一个值不能转换为合法的数字，也就是非法的数值，在语言规定中NaN即不大于其他值，也不小于其他值
             var a = 32；
             var b = “fo”
             b不能转换为合法的数值，所以不能比较
             若是俩个都是字母可以比较
             var a = “asd”；
             var b = “zxc”；
             a < b;//true
     2.2.1 变量
          变量名必须是 合法的标识符
          标识符规则：必须以a-z，A-Z，美元符号$，或以_开头，这些任意的字符外还可以加0到9.
          变量名可以做属性名字  但不能与null undefined，，，，等的名称冲突。
    2.2.2 函数作用域      
          注意用var在函数内部声明的变量 为局部变量，如果不用var声明函数内部的变量为和在函数外部用var声明的为全局变量。
    2.2.3      
          函数内部的作用域可以被这个函数内部的函数的代码访问，但是函数内部的代码的不能访问外部的作用域。
          function a（）{
               var b = 1；
               c();
               function c （）{
               e ();
               var d = 2；
               function e （）{
               var f = 3；
               console.log （d + b + f）；//6
               }
               console.log （b + d）；//3
               }
               console.log （b）；//1
          }
          a（）；
        关于let的使用  它是一个块级{...}内使用
        function foo (){
          var a = 1;
          if ( a > 0 ){
              let b = 5;
              if ( b < 7 ){
               let c = b + a;
               b = b + 1;
               console.log ( b );//6
              }
          }
        }
        foo ();
        let 使得 b 只属于if语句内使用。而不是整个foo函数的作用域
   2.2.4 条件
        if(){
        你想要输入的代码}
        else if ()
        {
        你想输入的代码
        }
        else{你想输入的代码}
      当条件多了的时候 这个if语句并不合适了那我们会想到 switch语句
         switch (a){
               case 2:
               //做一些很酷的事情
               break;
               case 3:
               //做一些很酷的代码
               break;
               default:
               //备用方案
        
         }
         
         这种情况和上面的不一样
         switch (a){
            case : 2
            case : 4
            //做一些很酷的事情
            break；
            case 5：
            break；
            default：
            //备用方案
         }
         
         还有一种条件操作符
         var b = 1；
         var c = 2；
         var a = (b > c) ? "world" : "asd";
         
    2.2.5 strict 模式
          在这种模式下面出现的bug会减少很多。
          如果你在使用strict模式下 在局部函数内想声明 一个变量但是没有使用var等来声明  就会报错。
          一种是全局模式下的strict
          还有一种是 函数模式下的strict模式
          function foo （） {
          “use strict”
          var a = 1；
          return a；
          }
         foo ()；
    2.2.6   函数做为值
            可以向函数传递一个值，函数也是一个值，他也可以传给其他函数
            function foo (){
            }
            
            还有一个匿名函数表达式 
            var a = function ()
               {
               };//因为没有名字 而且还复制给a；
               还有一个是函数命名表达式
               var c = function foo （）{
               
               }
               函数命名表达式用的比较多，但是匿名函数表达式还是会出现
               
              还有一个叫立即被调用的函数表达式//执行函数表达式
              （function foo（）{}）（）；
              包括函数的（）是js的微妙的文法
              （function foo （）{}）（）；后面的（）才是立即执行函数表达式的关键点。
              
              function foo （）
            {}//foo是函数应用表达式 用“（）”即可执行这个函数
            foo （）；
            
            （function foo （）{}）（）；
            iife 函数表达式   调用“（）” 即可执行函数表达式
            
            IIfe还可以作为返回值使用
            var a = （function foo （）{
            var b = 1；
            return b；
            }）（））；
            IIFE还可以作为函数，它的函数作用域不影响围围绕它的代码。
            var a = 42；
            （function foo （）{
            var a = 1；
            console.log （a）；
            }）（；）
            console.log （a）；//值为1
      2.2.7   闭包
             书上说的方法是：即使函数已经运行完了，他依然还可以“记住”并持续访问函数的作用域。
             function foo () {
                var x = 1;
                function fdd ()
                 {
             console.log(x);
                 }
                 fdd ();
      }
         
             foo ();
      
        VM97:5 1  答案是1  是对的
        undefined   这里为什么是undefined？？？？？？
    2.2.8 模块
          
    2.2.9 this  标识符
     
     如何判断this指向哪个object  主要看函数是如何被调用的
     重要的理解不是指函数本身
          function foo (){
       console.log (this.bar);
}
var  bar = "asd";
var obj1 = {
    bar : "obj1",
    foo : foo
};
var obj2 = {
    bar : "obj2",
};
foo ();
obj1.foo();
foo.call (obj1);
new foo ();
//asd
VM251:2 obj1
VM251:2 obj1
VM251:2 undefine

2.2.10   原型
     当你引用一个对象上的属性时，如果这个属性不存在，JavaScript将会自动的使用这个对象内部原型引用来寻找另外一个对象，在它的上面查询你想要的属性。
     你可以认为它几乎是属性缺失时的备用对象。
     一个对象到用备用对象的内部原型引用链接发生在这个对象被创建的时候。说明她创建最简单的方法用到的是Object.creat（）的内建工具
     var foo = {
           s : 3,
        
    };
    var fdd = Object.create(foo);
    fdd.s = 1;
    
    本来对象上没有s属性，但是通过原型链，fdd对象连接到foo对象上，就在foo对象上找到了s属性。
    使用这样的行为方式我们称它为 “”行为委托”   就是一个被委托的函数用到另一个函数所需的部分行为上。
2.2.11  填补
    一个行的特性（方法）可以在新老版本的流浪器中都可以用，但是这新的特性（方法）比老的更合适或者说更好用。
    if (!Number.isNaN){
      Number.isNaN = function (x) {
       return !x = x;
      }
    }
    如果方法不在 可以添加新的特性。不是所有的新特性和自己设置的特性可以填补，可能引来更多的bug。
    
 2.2.12 转译
 2.2.13 非JavaScript
 
    
    
    
       
      
   
             
           
           
         
          
          
          
